name: Build and Deploy News Site

on:
<<<<<<< HEAD
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *' # Günlük 03:00 UTC
  push:
    branches:
      - main 
=======
  # Bu, GitHub Actions arayüzünden manuel olarak iş akışını çalıştırmanıza olanak tanır.
  workflow_dispatch:

  # Bu, iş akışının belirli bir takvime göre otomatik olarak çalışmasını sağlar.
  # Her gün UTC saatiyle 03:00'te çalışır. API limitlerinizi göz önünde bulundurarak bu saati ayarlayabilirsiniz.
  schedule:
    - cron: '0 3 * * *' 

  # Bu, ana brança (main) her push yapıldığında iş akışını çalıştırır.
  # Eğer sadece zamanlanmış çalıştırma istiyorsanız bu bloğu kaldırabilirsiniz.
  push:
    branches:
      - main # Ana brançınızın adı neyse onu kullanın (genellikle 'main' veya 'master')
>>>>>>> d21884b (V3)

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # İş akışının çalışacağı işletim sistemi

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
HEAD
          submodules: true
          fetch-depth: 0   
=======
          submodules: true # Eğer Hugo temanız bir Git submodule ise bu gereklidir.
                           # Manuel yapıştırdıysanız veya dahil etmiyorsanız sorun değil.
          fetch-depth: 0   # Git geçmişinin tamamını çeker, bu Hugo'nun bazı özelliklerini destekleyebilir.
>>>>>>> d21884b (V3)

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
<<<<<<< HEAD
          python-version: '3.9' 
=======
          python-version: '3.9' # Kullandığınız Python sürümünü belirtin (ör: '3.9', '3.10', '3.11')
>>>>>>> d21884b (V3)

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
<<<<<<< HEAD
          pip install Flask requests apscheduler python-dotenv

      - name: Run News Bot (Fetch News & Build Hugo Content)
        env:
          WORLD_NEWS_API_KEY: ${{ secrets.WORLD_NEWS_API_KEY }}
        run: |
          # Flask sunucusunu başlatmadan, haber çekme ve Hugo içeriği oluşturma mantığını doğrudan çağır.
          # news_bot.py içindeki run_news_processing_and_build fonksiyonunu kullanıyoruz.
          python -c "from news_bot import run_news_processing_and_build; run_news_processing_and_build()"
        working-directory: ${{ github.workspace }} # Botun kendi kök dizininde çalışmasını sağla

      - name: Build Hugo Site
        working-directory: static_site # Hugo'nun çalışacağı dizini belirt
        run: |
          # Hugo'yu yükle (Gerekli versiyonu seçin)
          wget https://github.com/gohugoio/hugo/releases/download/v0.92.2/hugo_extended_0.92.2_Linux-64bit.deb
          sudo dpkg -i hugo_extended_0.92.2_Linux-64bit.deb

          # Hugo sitesini derle
=======
          # Eğer projenizde requirements.txt varsa aşağıdaki satırı kullanın
          # pip install -r requirements.txt
          # Gerekli kütüphaneleri manuel olarak yükle
          pip install Flask requests apscheduler python-dotenv

      - name: Run News Bot (Fetch News & Generate Hugo Content)
        env:
          # GitHub Secrets'tan API anahtarını ortam değişkeni olarak sağlar.
          WORLD_NEWS_API_KEY: ${{ secrets.WORLD_NEWS_API_KEY }}
        run: |
          # Flask sunucusunu başlatmadan, haber çekme ve Hugo içeriği oluşturma mantığını doğrudan çağırıyoruz.
          # news_bot.py dosyasındaki 'run_news_processing_and_build' fonksiyonunu Python komutuyla çalıştır.
          # Bu komut, 'my_news_site_bot' ana dizininde çalışır.
          python -c "from news_bot import run_news_processing_and_build; run_news_processing_and_build()"
        # working-directory: ${{ github.workspace }} # Varsayılan olarak repo kök dizininde çalışır.
                                                     # Bu satır aslında gereksiz çünkü varsayılan budur.

      - name: Build Hugo Site
        # Hugo'nun 'static_site' klasörü içinde çalışmasını sağlar
        working-directory: static_site 
        run: |
          # Hugo CLI aracını indir ve kur (Ubuntu için .deb paketi)
          # Kullandığınız Hugo sürümünü ve işletim sistemini kontrol edin.
          wget https://github.com/gohugoio/hugo/releases/download/v0.92.2/hugo_extended_0.92.2_Linux-64bit.deb -O /tmp/hugo.deb
          sudo dpkg -i /tmp/hugo.deb
          
          # Hugo sitesini derle. -D taslakları da dahil eder.
>>>>>>> d21884b (V3)
          hugo -D

      - name: Deploy to GitHub Pages
        # GitHub Pages'e derlenmiş siteyi dağıtmak için popüler bir action
        uses: peaceiris/actions-gh-pages@v4
        with:
          # GitHub tarafından sağlanan varsayılan bir token, dağıtım için yetkilidir.
          github_token: ${{ secrets.GITHUB_TOKEN }}
<<<<<<< HEAD
          publish_dir: ./static_site/public # Hugo'nun çıktısının olduğu dizin (repo köküne göre)
          # publish_branch: gh-pages # Eğer GitHub Pages'i farklı bir branştan yayınlıyorsanız bu satırı aktif edin
=======
          # Hugo'nun derlenmiş çıktısının bulunduğu dizin. 
          # Burası `static_site` klasörünün içindeki `public` klasörüdür.
          publish_dir: ./static_site/public 
          # GitHub Pages'i yayınladığınız branş. 
          # Eğer "main" branşından yayınlıyorsanız bu satırı yorum satırı bırakın.
          # Varsayılan olarak 'gh-pages' branşına dağıtır.
          # Eğer Pages ayarlarınızda "Deploy from a branch" seçili ise ve o branş 'main' ise bu satırı kaldırın.
          # publish_branch: gh-pages
>>>>>>> d21884b (V3)
